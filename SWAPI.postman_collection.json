{
	"info": {
		"_postman_id": "39901517-9b3f-4039-beba-1f8bb43a06eb",
		"name": "SWAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.dev/api",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Correct response format JSON\r",
							"    pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"// 2. We have all declared fields in the response;\r",
							"   pm.test(\"Check that we have all declared fields\", function() {\r",
							"       const jsonData = pm.response.json();\r",
							"       pm.expect(jsonData).to.have.property(\"people\");\r",
							"       pm.expect(jsonData).to.have.property(\"planets\");\r",
							"       pm.expect(jsonData).to.have.property(\"films\");\r",
							"       pm.expect(jsonData).to.have.property(\"species\");\r",
							"       pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"       pm.expect(jsonData).to.have.property(\"starships\");\r",
							"   });\r",
							"   \r",
							"// 3. Field value is not NULL\r",
							"    pm.test(\"Check if value is not NULL\", function() {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.people).not.equal(null);\r",
							"        pm.expect(jsonData.planets).not.equal(null);\r",
							"        pm.expect(jsonData.films).not.equal(null);\r",
							"        pm.expect(jsonData.species).not.equal(null);\r",
							"        pm.expect(jsonData.vehicles).not.equal(null);\r",
							"        pm.expect(jsonData.starships).not.equal(null);\r",
							"    })\r",
							"\r",
							"    //4. Check value is not empty\r",
							"    pm.test(\"Check value is not empty\", function() {\r",
							"        const jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.people).not.equal(\"\");\r",
							"        pm.expect(jsonData.planets).not.equal(\"\");\r",
							"        pm.expect(jsonData.films).not.equal(\"\");\r",
							"        pm.expect(jsonData.species).not.equal(\"\");\r",
							"        pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"        pm.expect(jsonData.starships).not.equal(\"\");\r",
							"    })\r",
							"\r",
							"    //5. Check if field corresponds to a specific value\r",
							"    pm.test(\"Check if field corresponds to a specific value\", function() {\r",
							"        let jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"        pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"        pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"        pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"        pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"        pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
							"    })\r",
							"\r",
							"    //6. Status code is 200\r",
							"    pm.test(\"Status code is 200\", function() {\r",
							"        pm.response.to.have.status(200)\r",
							"    })\r",
							"\r",
							"    //7. Status message is OK\r",
							"    pm.test(\"Status message is OK\", function() {\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    //8. Response time is less 1000ms\r",
							"    pm.test(\"Response time is less 1000ms\", function() {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"    })\r",
							"\r",
							"    //9. There is a specific header in the response\r",
							"    pm.test(\"There is a specific header in the response\", function() {\r",
							"        pm.response.to.have.header(\"Content-Type\")\r",
							"    })\r",
							"\r",
							"    //10. The response has a specific header with a specific value\r",
							"    pm.test(\"10. The response has a specific header with a specific value\", function() {\r",
							"         pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"    })\r",
							"\r",
							"    //11. Cookie exists\r",
							"    pm.test(\"Cookie exists\", function() {\r",
							"        pm.cookies.has(\"__cfduid\")\r",
							"    })\r",
							"\r",
							"    //12. Cookie has value\r",
							"    pm.test(\"Cookie has value\", function() {\r",
							"        try{\r",
							"            let MY_COOKIE = pm.cookies.get(\"__cfduid\")\r",
							"            console.log(\"__cfduid\");\r",
							"        } catch (e) {\r",
							"            console.log(\"SOME PROBLEM WITH COOKIE ->\" + e)\r",
							"        }\r",
							"    })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"eeed41b0-f510-484e-86a0-2d97cac8a765",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"den\"}"
						},
						"url": {
							"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"eeed41b0-f510-484e-86a0-2d97cac8a765",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 05 Feb 2021 09:32:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=450bf8c903f6f741"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=28f432e9f24a6e7b"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "116"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1612517173"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"den\",\n        \"message\": \"success\",\n        \"created\": true,\n        \"header\": \"The exemple\"\n    }\n}"
				},
				{
					"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"eeed41b0-f510-484e-86a0-2d97cac8a765",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 05 Feb 2021 09:25:25 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=450bf8c903f6f741"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=28f432e9f24a6e7b"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "116"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1612517173"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n        \"header\": \"The exemple\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"den\"}"
				},
				"url": {
					"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"eeed41b0-f510-484e-86a0-2d97cac8a765",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"eeed41b0-f510-484e-86a0-2d97cac8a765",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 05 Feb 2021 09:25:25 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=450bf8c903f6f741"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=28f432e9f24a6e7b"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "116"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1612517173"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\",\n        \"header\": \"The exemple\"\n    }\n}"
				},
				{
					"name": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"den\"}"
						},
						"url": {
							"raw": "https://eeed41b0-f510-484e-86a0-2d97cac8a765.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"eeed41b0-f510-484e-86a0-2d97cac8a765",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 05 Feb 2021 09:32:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=450bf8c903f6f741"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=28f432e9f24a6e7b"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "116"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1612517173"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"den\",\n        \"message\": \"success\",\n        \"created\": true,\n        \"header\": \"The exemple\"\n    }\n}"
				}
			]
		}
	]
}